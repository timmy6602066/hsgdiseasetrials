# -*- coding: utf-8 -*-
"""fetch_trials_output.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qx0lih-Dbir2Ra22FXOz3Vn7kLOJWWyT
"""

# !pip install psycopg2
# !pip install groq

import psycopg2
import os
from groq import Groq

GROQ_API_KEY = "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"
client = Groq(api_key=GROQ_API_KEY)


def execute_queries(nct_id):
    conn = psycopg2.connect(
        host="aact-db.ctti-clinicaltrials.org",
        database="aact",
        user="timmy6602066",
        password="nzj6602066",
        port="5432"
    )

    cur = conn.cursor()

    queries = [
        "SELECT * FROM ctgov.browse_interventions WHERE nct_id = '{nct_id}';",
        "SELECT * FROM ctgov.design_groups WHERE nct_id = '{nct_id}';",
        "SELECT * FROM ctgov.design_outcomes WHERE nct_id = '{nct_id}';",
        "SELECT * FROM ctgov.eligibilities WHERE nct_id = '{nct_id}';",
        "SELECT * FROM ctgov.interventions WHERE nct_id = '{nct_id}';",
        "SELECT * FROM ctgov.keywords WHERE nct_id = '{nct_id}';",
        "SELECT * FROM ctgov.outcome_analyses WHERE nct_id = '{nct_id}';",
        "SELECT * FROM ctgov.outcome_counts WHERE nct_id = '{nct_id}';",
        "SELECT * FROM ctgov.outcome_measurements WHERE nct_id = '{nct_id}';",
        "SELECT * FROM ctgov.outcomes WHERE nct_id = '{nct_id}';",
        "SELECT * FROM ctgov.studies WHERE nct_id = '{nct_id}';",
        "SELECT * FROM ctgov.study_references WHERE nct_id = '{nct_id}';",
        "SELECT * FROM ctgov.browse_conditions WHERE nct_id = '{nct_id}';",
        "SELECT description FROM ctgov.brief_summaries WHERE nct_id = '{nct_id}';",
        "SELECT description FROM ctgov.detailed_descriptions WHERE nct_id = '{nct_id}';"
    ]

    combined_results = []


    for query in queries:
        formatted_query = query.format(nct_id=nct_id)
        cur.execute(formatted_query)
        study_info = cur.fetchall()

        if study_info:
            combined_results.append(f"Results for query: {formatted_query}\n")
            for row in study_info:
                combined_results.append(str(row))
            combined_results.append("\n")

    cur.close()
    conn.close()

    return "\n".join(combined_results)

def process_with_groq(input_text):
    lm = client.chat.completions.create(
        messages=[
            {
                "role": "system",
                "content": (
                    "Please explain the recommendation trial methods for patients first and then summarize the experimental report by sections. Use simple sentences and easy-to-understand language. "
                    "(for people without a medical background). And bring more structures to the output (title for each section)"
                ),
            },
            {
                "role": "user",
                "content": input_text,
            }
        ],
        model="mixtral-8x7b-32768",
    )


    return lm.choices[0].message.content

# if __name__ == "__main__":

# user_input = input("Please enter the nct_id: ").strip()

def main(user_input):
    query_results = execute_queries(user_input)
    if query_results:
        simplified_output = process_with_groq(query_results)
        return simplified_output
        # print(simplified_output)
    else:
        return "No data found for the provided nct_id."
